<feed xmlns="http://www.w3.org/2005/Atom">
  <generator uri="https://github.com/jtauber/ryland">Ryland</generator>
  <link href="https://jtauber.github.io/CARC/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://jtauber.github.io/CARC/" rel="alternate" type="text/html"/>
  <updated>2025-10-20T22:39:22.918055-04:00</updated>
  <id>https://jtauber.github.io/CARC/atom.xml</id>
  <title type="html">CARC</title>
  
    <subtitle>Corpus Analysis of Retro Code</subtitle>
  
  <author>
    <name>James Tauber</name>
  </author><entry>
    <title type="html">What is in the CATALOG of each disk</title>
    <link href="https://jtauber.github.io/CARC/2025/10/20/what-is-in-the-catalog-of-each-disk/" rel="alternate" type="text/html" title="What is in the CATALOG of each disk"/>
    <published>2025-10-20</published>
    <updated>2025-10-20T22:39:22.918055-04:00</updated>
    <id>https://jtauber.github.io/CARC/2025/10/20/what-is-in-the-catalog-of-each-disk/</id>
    <content type="html" xml:base="https://jtauber.github.io/CARC/2025/10/20/what-is-in-the-catalog-of-each-disk/">&lt;p&gt;I decided to extract the file metadata from disks with a standard layout.&lt;/p&gt;
&lt;p&gt;As mentioned in an earlier post: of the &lt;strong&gt;12,450&lt;/strong&gt; disks in the initial Apple II Disk Corpus,
&lt;strong&gt;7,092&lt;/strong&gt; appear to have a regular DOS 3.3 VTOC (based on the values at offsets &lt;code&gt;$03&lt;/code&gt;, &lt;code&gt;$27&lt;/code&gt;, &lt;code&gt;$34&lt;/code&gt;, &lt;code&gt;$35&lt;/code&gt;, &lt;code&gt;$36&lt;/code&gt;, &lt;code&gt;$37&lt;/code&gt;).
Of those, &lt;strong&gt;6,998&lt;/strong&gt; have a CATALOG starting on Track &lt;code&gt;$11&lt;/code&gt; Sector &lt;code&gt;$0F&lt;/code&gt; and that’s what I decided to explore for this post.&lt;/p&gt;
&lt;p&gt;There are a total of &lt;strong&gt;150,558&lt;/strong&gt; files.&lt;/p&gt;
&lt;p&gt;The most common file types are:&lt;/p&gt;
&lt;table class=&#34;table&#34;&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;$04&lt;/code&gt;&lt;/td&gt;&lt;td&gt;BINARY&lt;/td&gt;&lt;td style=&#34;text-align: right;&#34;&gt;82,357&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;$02&lt;/code&gt;&lt;/td&gt;&lt;td&gt;APPLESOFT BASIC&lt;/td&gt;&lt;td style=&#34;text-align: right;&#34;&gt;35,117&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;$00&lt;/code&gt;&lt;/td&gt;&lt;td&gt;TEXT&lt;/td&gt;&lt;td style=&#34;text-align: right;&#34;&gt;26,931&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;$01&lt;/code&gt;&lt;/td&gt;&lt;td&gt;INTEGER BASIC&lt;/td&gt;&lt;td style=&#34;text-align: right;&#34;&gt;3,138&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;$08&lt;/code&gt;&lt;/td&gt;&lt;td&gt;S type&lt;/td&gt;&lt;td style=&#34;text-align: right;&#34;&gt;989&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;$40&lt;/code&gt;&lt;/td&gt;&lt;td&gt;B type&lt;/td&gt;&lt;td style=&#34;text-align: right;&#34;&gt;866&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;$10&lt;/code&gt;&lt;/td&gt;&lt;td&gt;RELOCATABLE&lt;/td&gt;&lt;td style=&#34;text-align: right;&#34;&gt;303&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;$20&lt;/code&gt;&lt;/td&gt;&lt;td&gt;A type&lt;/td&gt;&lt;td style=&#34;text-align: right;&#34;&gt;172&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;The most common file names are:&lt;/p&gt;
&lt;table class=&#34;table&#34;&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;HELLO&lt;/code&gt;                         &lt;/td&gt;&lt;td style=&#34;text-align: right;&#34;&gt;4,414&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;MENU&lt;/code&gt;                          &lt;/td&gt;&lt;td style=&#34;text-align: right;&#34;&gt;785&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;(7 x &lt;code&gt;$08&lt;/code&gt;)                     &lt;/td&gt;&lt;td style=&#34;text-align: right;&#34;&gt;610&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;BOOT0&lt;/code&gt;                         &lt;/td&gt;&lt;td style=&#34;text-align: right;&#34;&gt;559&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;(empty)                                    &lt;/td&gt;&lt;td style=&#34;text-align: right;&#34;&gt;527&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;BOOT1&lt;/code&gt;                         &lt;/td&gt;&lt;td style=&#34;text-align: right;&#34;&gt;486&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;RWTS&lt;/code&gt;                          &lt;/td&gt;&lt;td style=&#34;text-align: right;&#34;&gt;485&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;AUTOTRACE&lt;/code&gt;                     &lt;/td&gt;&lt;td style=&#34;text-align: right;&#34;&gt;470&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;ADVANCED DEMUFFIN 1.5&lt;/code&gt;         &lt;/td&gt;&lt;td style=&#34;text-align: right;&#34;&gt;442&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;ADVANCED DEMUFFIN 1.5 DOCS&lt;/code&gt;    &lt;/td&gt;&lt;td style=&#34;text-align: right;&#34;&gt;441&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;PDP&lt;/code&gt;                           &lt;/td&gt;&lt;td style=&#34;text-align: right;&#34;&gt;399&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;SUPER DEMUFFIN&lt;/code&gt;                &lt;/td&gt;&lt;td style=&#34;text-align: right;&#34;&gt;397&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;LOGO&lt;/code&gt;                          &lt;/td&gt;&lt;td style=&#34;text-align: right;&#34;&gt;385&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;PDP.README&lt;/code&gt;                    &lt;/td&gt;&lt;td style=&#34;text-align: right;&#34;&gt;275&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;APPLESOFT&lt;/code&gt;                     &lt;/td&gt;&lt;td style=&#34;text-align: right;&#34;&gt;271&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;TITLE&lt;/code&gt;                         &lt;/td&gt;&lt;td style=&#34;text-align: right;&#34;&gt;242&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;(6 x &lt;code&gt;$08&lt;/code&gt;)                     &lt;/td&gt;&lt;td style=&#34;text-align: right;&#34;&gt;231&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;CHAIN&lt;/code&gt;                         &lt;/td&gt;&lt;td style=&#34;text-align: right;&#34;&gt;195&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;INTBASIC&lt;/code&gt;                      &lt;/td&gt;&lt;td style=&#34;text-align: right;&#34;&gt;191&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;RUNTIME&lt;/code&gt;                       &lt;/td&gt;&lt;td style=&#34;text-align: right;&#34;&gt;157&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;There is undoubtedly a &lt;em&gt;lot&lt;/em&gt; of file-level deduping to do and this also demonstrates the issue of cracked disks being common in the corpus.
The &lt;code&gt;DEMUFFIN&lt;/code&gt; files are, I assume, left-overs from the cracking process (in this case by the cracker “4am”). The &lt;code&gt;PDP&lt;/code&gt; files might be that too.&lt;/p&gt;</content>
    <author>
      <name>James Tauber</name>
    </author>
    <summary type="html">I decided to extract the file metadata from disks with a standard layout.</summary>
  </entry><entry>
    <title type="html">Where the Variations in the DOS 3.3 Boot Sector Happen</title>
    <link href="https://jtauber.github.io/CARC/2025/10/12/where-the-variations-in-the-dos-3.3-boot-sector-happen/" rel="alternate" type="text/html" title="Where the Variations in the DOS 3.3 Boot Sector Happen"/>
    <published>2025-10-12</published>
    <updated>2025-10-12T18:38:26.441083-04:00</updated>
    <id>https://jtauber.github.io/CARC/2025/10/12/where-the-variations-in-the-dos-3.3-boot-sector-happen/</id>
    <content type="html" xml:base="https://jtauber.github.io/CARC/2025/10/12/where-the-variations-in-the-dos-3.3-boot-sector-happen/">&lt;p&gt;Following on from the previous post,
I started wondering where the different DOS-3.3-style boot sector types diverge so I
constructed the following visualization.&lt;/p&gt;
&lt;p&gt;This is just a stacked bar chart with the x-axis representing the number of bytes into the sector
and the bars showing the proportion of disks with identical bytes up until that point.&lt;/p&gt;
&lt;p&gt;The brightest bars (at the bottom of the stack) represent the normal DOS 3.3 boot sector and so sudden drops indicate a larger number of disks that diverge from that point.
The biggest drops are labeled with the offset at which they occur.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/CARC/figures/boot_sector.svg&#34;&gt;&lt;/p&gt;
&lt;p&gt;In a normal DOS 3.3 boot sector, the code runs from &lt;code&gt;01&lt;/code&gt; to &lt;code&gt;4C&lt;/code&gt;, bytes &lt;code&gt;4D&lt;/code&gt; to &lt;code&gt;5C&lt;/code&gt; contain a table of data (mapping logical sectors to physical sectors), bytes &lt;code&gt;5D&lt;/code&gt; to &lt;code&gt;FC&lt;/code&gt; aren’t directly used by the boot process but can be used for DOS patches, and bytes &lt;code&gt;FD&lt;/code&gt; to &lt;code&gt;FF&lt;/code&gt; are some more data.&lt;/p&gt;
&lt;p&gt;The fact a drop happens after &lt;code&gt;4A&lt;/code&gt; rather than after &lt;code&gt;4C&lt;/code&gt; suggests the final &lt;code&gt;JMP&lt;/code&gt; has been changed. I’ll explore the variations in more detail in future posts.&lt;/p&gt;</content>
    <author>
      <name>James Tauber</name>
    </author>
    <summary type="html">Following on from the previous post,
I started wondering where the different DOS-3.3-style boot sector types diverge so I
constructed the following visualization.</summary>
  </entry><entry>
    <title type="html">Boot Sector Types in the Apple II Disk Corpus</title>
    <link href="https://jtauber.github.io/CARC/2025/10/12/boot-sector-types-in-the-apple-ii-disk-corpus/" rel="alternate" type="text/html" title="Boot Sector Types in the Apple II Disk Corpus"/>
    <published>2025-10-12</published>
    <updated>2025-10-12T14:15:03.996595-04:00</updated>
    <id>https://jtauber.github.io/CARC/2025/10/12/boot-sector-types-in-the-apple-ii-disk-corpus/</id>
    <content type="html" xml:base="https://jtauber.github.io/CARC/2025/10/12/boot-sector-types-in-the-apple-ii-disk-corpus/">&lt;p&gt;We previously looked at all sectors across the Apple II Disk Corpus but
what about variation in the &lt;em&gt;boot&lt;/em&gt; sector? In other words, track 0 sector 0.&lt;/p&gt;
&lt;p&gt;In this case, there are &lt;strong&gt;1,680&lt;/strong&gt; sector types and the top 20 are listed below.
Even though the most common starts with &lt;code&gt;01 38 B0 03 4C&lt;/code&gt;,
more start with &lt;code&gt;01 A5 26 C9 09&lt;/code&gt; (there is just more variation later on).&lt;/p&gt;
&lt;p&gt;The vast majority (&lt;strong&gt;11,802&lt;/strong&gt; disks) start with &lt;code&gt;01&lt;/code&gt; because
this is telling the &lt;code&gt;BOOT0&lt;/code&gt; code on the disk drive ROM how many sectors the &lt;code&gt;BOOT1&lt;/code&gt; code takes up.
The single sector &lt;code&gt;BOOT1&lt;/code&gt; code is then used to load the rest of DOS.&lt;/p&gt;
&lt;p&gt;Of those, &lt;strong&gt;7,505&lt;/strong&gt; continue with &lt;code&gt;A5&lt;/code&gt; and &lt;strong&gt;2,661&lt;/strong&gt; continue with &lt;code&gt;38&lt;/code&gt;. In fact &lt;strong&gt;7,476&lt;/strong&gt; continue with &lt;code&gt;A5 27 C9 09&lt;/code&gt; and &lt;strong&gt;2,653&lt;/strong&gt; with &lt;code&gt;38 B0 03 4C&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;A5 27 C9 09&lt;/code&gt; sequence is the beginning of the boot loader for &lt;strong&gt;DOS 3.3&lt;/strong&gt; and the &lt;code&gt;38 B0 03 4C&lt;/code&gt; sequence is the beginning of the boot loader for &lt;strong&gt;ProDOS&lt;/strong&gt;. I suspect some of the variation after that point is changes made for copy protection purposes but that will be a whole other avenue to explore.&lt;/p&gt;
&lt;p&gt;Also presumably not all the disks are bootable because they are data disks in multi-volume collections. One of my plans is to tag all the disks with various features, in part so that correlations can be studied.&lt;/p&gt;
&lt;pre class=&#34;codehilite&#34;&gt;&lt;code&gt;disks  first 16 bytes
--------------------------------------------------------------------
 2391  01 38 B0 03 4C 32 A1 86 43 C9 03 08 8A 29 70 4A ...
 1942  01 A5 27 C9 09 D0 18 A5 2B 4A 4A 4A 4A 09 C0 85 ...
 1403  01 A5 27 C9 09 D0 18 A5 2B 4A 4A 4A 4A 09 C0 85 ...
  723  01 A5 27 C9 09 D0 18 A5 2B 4A 4A 4A 4A 09 C0 85 ...
  572  01 A5 27 C9 09 D0 18 A5 2B 4A 4A 4A 4A 09 C0 85 ...
  249  01 E0 60 F0 03 4C E3 08 AD 00 08 C9 04 B0 0A 69 ...
  194  01 A5 27 C9 09 D0 18 A5 2B 4A 4A 4A 4A 09 C0 85 ...
  192  01 38 B0 03 4C 1C 09 78 86 43 C9 03 08 8A 29 70 ...
  156  01 A5 27 C9 09 D0 18 A5 2B 4A 4A 4A 4A 09 C0 85 ...
  137  01 A5 27 C9 09 D0 18 A5 2B 4A 4A 4A 4A 09 C0 85 ...
  132  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ...
   93  01 A5 27 C9 09 D0 18 A5 2B 4A 4A 4A 4A 09 C0 85 ...
   83  01 A5 27 C9 09 D0 10 A5 2B 4A 4A 4A 4A 09 C0 8D ...
   69  01 E0 70 B0 04 E0 40 B0 39 BD 88 C0 20 20 08 A2 ...
   67  01 A6 2B BD 88 C0 8A 4A 4A 4A 4A 09 C0 85 11 A9 ...
   63  01 A5 27 C9 09 D0 21 8D 50 C0 8D 57 C0 8D 52 C0 ...
   62  01 A5 27 C9 09 D0 18 A5 2B 4A 4A 4A 4A 09 C0 85 ...
   61  01 A5 27 C9 09 D0 18 A5 2B 4A 4A 4A 4A 09 C0 85 ...
   59  01 A5 27 C9 09 D0 18 A5 2B 4A 4A 4A 4A 09 C0 85 ...
   46  01 A5 27 C9 09 D0 18 A5 2B 4A 4A 4A 4A 09 C0 85 ...
&lt;/code&gt;&lt;/pre&gt;</content>
    <author>
      <name>James Tauber</name>
    </author>
    <summary type="html">We previously looked at all sectors across the Apple II Disk Corpus but
what about variation in the &lt;em&gt;boot&lt;/em&gt; sector? In other words, track 0 sector 0.</summary>
  </entry><entry>
    <title type="html">Why So Many Sectors Start with 00 11 0X 00</title>
    <link href="https://jtauber.github.io/CARC/2025/10/11/why-so-many-sectors-start-with-00-11-0x-00/" rel="alternate" type="text/html" title="Why So Many Sectors Start with 00 11 0X 00"/>
    <published>2025-10-11</published>
    <updated>2025-10-11T17:31:27.177509-04:00</updated>
    <id>https://jtauber.github.io/CARC/2025/10/11/why-so-many-sectors-start-with-00-11-0x-00/</id>
    <content type="html" xml:base="https://jtauber.github.io/CARC/2025/10/11/why-so-many-sectors-start-with-00-11-0x-00/">&lt;p&gt;As we saw in the previous post, ten out of the top 20 sector types start with &lt;code&gt;00 11 0X 00&lt;/code&gt; and continue with all zeros.
I suspected why this might be the case and I’ve now confirmed the reason.&lt;/p&gt;
&lt;p&gt;Note there are even &lt;em&gt;more&lt;/em&gt; sector types that &lt;em&gt;start&lt;/em&gt; with the sequence &lt;code&gt;00 11 0X 00&lt;/code&gt; if you don’t require the rest of the sector to be zeros.&lt;/p&gt;
&lt;p&gt;I immediately recognized the significance of &lt;code&gt;11&lt;/code&gt; (decimal 17) as the track number of the catalog (i.e. directory) on Apple DOS disks and suspected the byte that followed was a sector number (it&#39;s always of the form &lt;code&gt;0X&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Turns out almost all instances of this pattern were on other sectors on track &lt;code&gt;11&lt;/code&gt;. Sector &lt;code&gt;0F&lt;/code&gt; would have &lt;code&gt;00 11 0E 00&lt;/code&gt;, sector &lt;code&gt;0E&lt;/code&gt; would have &lt;code&gt;00 11 0D 00&lt;/code&gt; and so on. This is how the disk catalog is laid out in Apple DOS 3.3, with each catalog sector pointing to the next catalog sector (usually the sector before on track &lt;code&gt;11&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The all-zeros cases are just when that catalog sector is not needed (because there aren’t enough files). This explains why lower sector numbers came up more in the previous post (because lower catalog sectors are more likely to be empty than higher ones).&lt;/p&gt;
&lt;p&gt;Just over half the disks in the Apple II Disk corpus seem to follow this standard DOS 3.3 catalog layout which will be crucial in working at the file rather than disk level in future explorations.&lt;/p&gt;</content>
    <author>
      <name>James Tauber</name>
    </author>
    <summary type="html">As we saw in the previous post, ten out of the top 20 sector types start with &lt;code&gt;00 11 0X 00&lt;/code&gt; and continue with all zeros.
I suspected why this might be the case and I’ve now confirmed the reason.</summary>
  </entry><entry>
    <title type="html">Sector Types in the Apple II Disk Corpus</title>
    <link href="https://jtauber.github.io/CARC/2025/10/11/sector-types-in-the-apple-ii-disk-corpus/" rel="alternate" type="text/html" title="Sector Types in the Apple II Disk Corpus"/>
    <published>2025-10-11</published>
    <updated>2025-10-11T15:55:51.261343-04:00</updated>
    <id>https://jtauber.github.io/CARC/2025/10/11/sector-types-in-the-apple-ii-disk-corpus/</id>
    <content type="html" xml:base="https://jtauber.github.io/CARC/2025/10/11/sector-types-in-the-apple-ii-disk-corpus/">&lt;p&gt;A regular Apple II floppy disk has 560 sectors of 256 bytes.
Across the 12,450 disks in the current corpus, that’s &lt;strong&gt;6,972,000&lt;/strong&gt; sectors.
How many unique sector &lt;strong&gt;types&lt;/strong&gt; are there and what are the most common?&lt;/p&gt;
&lt;p&gt;There are &lt;strong&gt;2,780,066&lt;/strong&gt; sector types and, unsurprisingly, by far the most common
is a sector of all zeros which occurs &lt;strong&gt;1,647,906&lt;/strong&gt; times across &lt;strong&gt;12,319&lt;/strong&gt; (&lt;strong&gt;98.95&lt;/strong&gt;%) disks.&lt;/p&gt;
&lt;p&gt;Below is a listing of the top 20 sector types and how many disks they appear on.
There is a lot more that could (and will) be done here, including clustering disks based on
a distance metric of how many sector types they have in common.
But for now there are a few things that stand out.&lt;/p&gt;
&lt;p&gt;It is interesting that the second and third most common sector types are on so few disks.
It will be worth investigating what those disks are. The all-&lt;code&gt;FF&lt;/code&gt; type is also on surprisingly few disks.&lt;/p&gt;
&lt;p&gt;It is also interesting that the next eight (as well as two more in the top 20) are of the form:&lt;br /&gt;
&lt;code&gt;00 11 XX 00 00 00 00 00...&lt;/code&gt;&lt;br /&gt;
I think I know the reason—more on that soon!&lt;/p&gt;
&lt;p&gt;Finally, I’ll point out that most of the remaining top-20 are potentially code and I’ll attempt to disassemble them
in a later post.&lt;/p&gt;
&lt;pre class=&#34;codehilite&#34;&gt;&lt;code&gt; sectors  disks  first 16 bytes
--------------------------------------------------------------------
 1647906  12319  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ...
   14665    110  FC 03 FC 03 FC 03 FC 03 FC 03 FC 03 FC 03 FC 03 ...
   12379    197  20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 ...
    6859   6794  00 11 02 00 00 00 00 00 00 00 00 00 00 00 00 00 ...
    6837   6792  00 11 01 00 00 00 00 00 00 00 00 00 00 00 00 00 ...
    6800   6734  00 11 03 00 00 00 00 00 00 00 00 00 00 00 00 00 ...
    6727   6655  00 11 04 00 00 00 00 00 00 00 00 00 00 00 00 00 ...
    6591   6523  00 11 05 00 00 00 00 00 00 00 00 00 00 00 00 00 ...
    6452   6383  00 11 06 00 00 00 00 00 00 00 00 00 00 00 00 00 ...
    6294   6200  00 11 07 00 00 00 00 00 00 00 00 00 00 00 00 00 ...
    6026   5957  00 11 08 00 00 00 00 00 00 00 00 00 00 00 00 00 ...
    5983   5880  A2 00 A0 02 88 B1 3E 4A 3E 00 BC 4A 3E 00 BC 99 ...
    5718   5608  A2 02 8E 52 AA CD B2 AA D0 19 CA 8E 52 AA CA 8E ...
    5675   5555  0A C8 C0 1E D0 F3 AE 9C B3 18 60 20 30 B2 90 DB ...
    5643    702  FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF ...
    5624   5558  00 11 09 00 00 00 00 00 00 00 00 00 00 00 00 00 ...
    5227   5218  FF 00 00 FF FF 00 00 FF FF 00 00 FF FF 00 00 FF ...
    5221   5144  AD 00 02 CD B2 AA F0 03 4C A4 9F AD 01 02 C9 8D ...
    5171   5141  91 40 8A C8 91 40 AA CA 68 48 C8 91 40 C8 8A 91 ...
    4967   4901  00 11 0A 00 00 00 00 00 00 00 00 00 00 00 00 00 ...
&lt;/code&gt;&lt;/pre&gt;</content>
    <author>
      <name>James Tauber</name>
    </author>
    <summary type="html">A regular Apple II floppy disk has 560 sectors of 256 bytes.
Across the 12,450 disks in the current corpus, that’s &lt;strong&gt;6,972,000&lt;/strong&gt; sectors.
How many unique sector &lt;strong&gt;types&lt;/strong&gt; are there and what are the most common?</summary>
  </entry><entry>
    <title type="html">Byte Value Rank Differences For A Specific Disk</title>
    <link href="https://jtauber.github.io/CARC/2025/10/10/byte-value-rank-differences-for-a-specific-disk/" rel="alternate" type="text/html" title="Byte Value Rank Differences For A Specific Disk"/>
    <published>2025-10-10</published>
    <updated>2025-10-11T04:11:59.589427-04:00</updated>
    <id>https://jtauber.github.io/CARC/2025/10/10/byte-value-rank-differences-for-a-specific-disk/</id>
    <content type="html" xml:base="https://jtauber.github.io/CARC/2025/10/10/byte-value-rank-differences-for-a-specific-disk/">&lt;p&gt;Having ranked all the byte values across 12,450 Apple II disk images, how might a specific disk differ?&lt;/p&gt;
&lt;p&gt;As an initial experiment, I ranked the byte values on the Ultima IV boot disk and generated this heatmap
showing how much the rank on the Ultima IV boot disk differs from that across the entire corpus.&lt;/p&gt;
&lt;p&gt;Green indicates higher ranked than in the full corpus and red indicates lower ranked.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/CARC/figures/byte_rank_diff.svg&#34;&gt;&lt;/p&gt;
&lt;p&gt;This approach could be applied to any individual disk but also any subcorpora (say just DOS 3.3 disks or just text adventure games).&lt;/p&gt;</content>
    <author>
      <name>James Tauber</name>
    </author>
    <summary type="html">Having ranked all the byte values across 12,450 Apple II disk images, how might a specific disk differ?</summary>
  </entry><entry>
    <title type="html">Ranking Byte Values in the Apple II Disk Corpus</title>
    <link href="https://jtauber.github.io/CARC/2025/10/10/ranking-byte-values-in-the-apple-ii-disk-corpus/" rel="alternate" type="text/html" title="Ranking Byte Values in the Apple II Disk Corpus"/>
    <published>2025-10-10</published>
    <updated>2025-10-10T20:30:37.674052-04:00</updated>
    <id>https://jtauber.github.io/CARC/2025/10/10/ranking-byte-values-in-the-apple-ii-disk-corpus/</id>
    <content type="html" xml:base="https://jtauber.github.io/CARC/2025/10/10/ranking-byte-values-in-the-apple-ii-disk-corpus/">&lt;p&gt;Which are the most common byte values across the 12,450 Apple II disk images?&lt;/p&gt;
&lt;p&gt;Here is a heatmap showing the rank of each byte value. Note this is the &lt;strong&gt;rank&lt;/strong&gt;,
not the frequency.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/CARC/figures/byte_rank_heatmap.svg&#34;&gt;&lt;/p&gt;
&lt;p&gt;The top 16 byte values (most common to less common) are:&lt;br /&gt;
&lt;code&gt;00 20 A0 FF 80 01 7F D0 03 8D 02 AA 30 A9 3A 22&lt;/code&gt; ...&lt;/p&gt;
&lt;p&gt;The bottom 16 byte values (more common to least common) are:&lt;br /&gt;
... &lt;code&gt;93 5C 7D 9C 5E DC 92 DE 9A 7B 97 DA 7A 8B 5B 9B&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It will be fascinating to see if this varies on other platforms and also by disk category (e.g. games vs others).&lt;/p&gt;</content>
    <author>
      <name>James Tauber</name>
    </author>
    <summary type="html">Which are the most common byte values across the 12,450 Apple II disk images?</summary>
  </entry><entry>
    <title type="html">Gathering Apple II Disk Images</title>
    <link href="https://jtauber.github.io/CARC/2025/10/09/gathering-apple-ii-disk-images/" rel="alternate" type="text/html" title="Gathering Apple II Disk Images"/>
    <published>2025-10-09</published>
    <updated>2025-10-10T23:08:37.343224-04:00</updated>
    <id>https://jtauber.github.io/CARC/2025/10/09/gathering-apple-ii-disk-images/</id>
    <content type="html" xml:base="https://jtauber.github.io/CARC/2025/10/09/gathering-apple-ii-disk-images/">&lt;p&gt;I want to get a lot of 6502 machine code, BASIC source, etc. so I’ve gathered a few
thousand Apple II disk images.&lt;/p&gt;
&lt;p&gt;I started there as it’s what I&#39;m most familiar with.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.apple.asimov.net/site_files.txt&#34;&gt;https://www.apple.asimov.net/site_files.txt&lt;/a&gt; lists &lt;strong&gt;39,663&lt;/strong&gt; files of which &lt;strong&gt;15,187&lt;/strong&gt; end in &lt;code&gt;.dsk&lt;/code&gt; (case-insensitive).
Based on category gleaned from the file path, I identified &lt;strong&gt;13,322&lt;/strong&gt; Apple II disk images to download.&lt;/p&gt;
&lt;p&gt;Of these, &lt;strong&gt;13,312&lt;/strong&gt; successfully downloaded and &lt;strong&gt;13,252&lt;/strong&gt; are the expected size: 143,360 bytes.
Of those &lt;strong&gt;13,252&lt;/strong&gt;, I eliminated a further &lt;strong&gt;802&lt;/strong&gt; as having a duplicate MD5 hash.&lt;/p&gt;
&lt;p&gt;Of the &lt;strong&gt;12,450&lt;/strong&gt; deduplicated disk images of the right size, &lt;strong&gt;7,092&lt;/strong&gt; (&lt;strong&gt;57.0&lt;/strong&gt;%) of them appear to be normal DOS 3.3 disks with a regular VTOC. That’s not to say I can’t do interesting things with the other disks, but it will be a lot more difficult.&lt;/p&gt;
&lt;p&gt;I won’t check-in all the disk images but the GitHub repo does contain the file lists and all the code I’ve written so far.&lt;/p&gt;</content>
    <author>
      <name>James Tauber</name>
    </author>
    <summary type="html">I want to get a lot of 6502 machine code, BASIC source, etc. so I’ve gathered a few
thousand Apple II disk images.</summary>
  </entry><entry>
    <title type="html">Kicking off the Project</title>
    <link href="https://jtauber.github.io/CARC/2025/10/09/kicking-off-the-project/" rel="alternate" type="text/html" title="Kicking off the Project"/>
    <published>2025-10-09</published>
    <updated>2025-10-10T23:06:45.456691-04:00</updated>
    <id>https://jtauber.github.io/CARC/2025/10/09/kicking-off-the-project/</id>
    <content type="html" xml:base="https://jtauber.github.io/CARC/2025/10/09/kicking-off-the-project/">&lt;p&gt;Okay, I’ve started &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/jtauber/CARC&#34;&gt;a repo&lt;/a&gt; (and even came up with a Tolkien-inspired acronym)! If you’re interested, star / watch the repo. I’ll start some discussions there too.&lt;/p&gt;</content>
    <author>
      <name>James Tauber</name>
    </author>
    <summary type="html">Okay, I’ve started &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/jtauber/CARC&#34;&gt;a repo&lt;/a&gt; (and even came up with a Tolkien-inspired acronym)! If you’re interested, star / watch the repo. I’ll start some discussions there too.</summary>
  </entry></feed>